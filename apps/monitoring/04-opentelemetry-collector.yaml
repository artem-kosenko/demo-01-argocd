apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: opentelemetry-collector
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://open-telemetry.github.io/opentelemetry-helm-charts
    chart: opentelemetry-collector
    targetRevision: 0.133.0
    helm:
      values: |
        mode: daemonset

        image:
          repository: otel/opentelemetry-collector-contrib
          tag: "0.133.0"
        
        presets:
          logsCollection:
            enabled: true
          kubernetesAttributes:
            enabled: true
            extractAllPodLabels: false
        
        config:
          receivers:
            filelog:
              include:
                - "/var/log/pods/*/*/*.log"
              start_at: beginning
              operators:
                - type: json_parser
                  parse_from: body
                  parse_to: body
                  timestamp:
                    parse_from: body.time
                    layout: '%Y-%m-%dT%H:%M:%S.%LZ'


          processors:
            batch: {}
            k8sattributes:
              auth_type: "serviceAccount"
              passthrough: false
              filter:
                # only retrieve pods running on the same node as the collector
                node_from_env_var: KUBE_NODE_NAME
              extract:
                # The attributes provided in 'metadata' will be added to associated resources
                metadata:
                  - k8s.pod.name
                  - k8s.pod.uid
                  - k8s.deployment.name
                  - k8s.namespace.name
                  - k8s.node.name
                  - k8s.pod.start_time
                  - service.namespace
                  - service.name
                  - service.version
                  - service.instance.id
                labels:
                  # This label extraction rule takes the value 'app.kubernetes.io/component' label and maps it to the 'app.label.component' attribute which will be added to the associated resources
                  - tag_name: app.label.component
                    key: app.kubernetes.io/component
                    from: pod
                otel_annotations: true 
              pod_association:
                - sources:
                    # This rule associates all resources containing the 'k8s.pod.ip' attribute with the matching pods. If this attribute is not present in the resource, this rule will not be able to find the matching pod.
                    - from: resource_attribute
                      name: k8s.pod.ip
                - sources:
                    # This rule associates all resources containing the 'k8s.pod.uid' attribute with the matching pods. If this attribute is not present in the resource, this rule will not be able to find the matching pod.
                    - from: resource_attribute
                      name: k8s.pod.uid
                - sources:
                    # This rule will use the IP from the incoming connection from which the resource is received, and find the matching pod, based on the 'pod.status.podIP' of the observed pods
                    - from: connection

            

          exporters:
            otlphttp:
              endpoint: "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
              compression: snappy
          service:
            pipelines:
              logs:
                receivers: [filelog]
                processors: [batch, k8sattributes]
                exporters: [otlphttp]

        clusterRole:
          create: true
    
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
